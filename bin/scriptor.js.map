{
  "version":  3, "sources": ["./bin/scriptor.es6"], "names": [],
  "mappings": "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",
  "file":     "./bin/scriptor.es6", "sourcesContent": [
  "/**\n * Created by Aaron on 6/30/2015.\n */\n\nimport options from 'commander';\nimport Module from 'module';\nimport glob from 'glob';\nimport path from 'path';\nimport package_json from './../package.json';\n\nlet constants = process.binding( 'constants' );\n\nimport ScriptorCommon from './../build/compat/common';\nimport ScriptorCLI from './../build/compat/cli';\n\nimport _ from 'lodash';\n\nfunction diff_ms( start ) {\n    let [seconds, nanoseconds] = process.hrtime( start );\n\n    let milliseconds = seconds * 1e3 + nanoseconds * 1e-6;\n\n    return milliseconds.toFixed( 3 ) + 'ms';\n}\n\nlet ms_pattern = /([0-9]+)([A-Z]+)?/i;\n\nfunction toMilliseconds( str ) {\n    let match = str.match( ms_pattern );\n\n    if( match ) {\n        let i = parseInt( match[1] );\n\n        if( !isNaN( i ) ) {\n            let u = match[2];\n\n            if( typeof u === 'string' ) {\n                u = u.toLowerCase();\n\n            } else if( u === void 0 ) {\n                return i;\n            }\n\n            switch( u ) {\n                case 'ms':\n                    return i;\n                case 's':\n                    return i * 1000;\n                case 'm':\n                    return i * 60 * 1000;\n                case 'h':\n                    return i * 60 * 60 * 1000;\n                case 'd':\n                    return i * 24 * 60 * 60 * 1000;\n                case 'y':\n                    return i * 365 * 24 * 60 * 60 * 1000;\n                default:\n                    return i;\n            }\n        }\n    }\n\n    return null;\n}\n\nfunction parseIntOrInfinity( value ) {\n    if( value.toLowerCase() === 'infinity' ) {\n        return Infinity;\n\n    } else {\n        return parseInt( value );\n    }\n}\n\n//Process status codes\nlet EXIT_SUCCESS = 0,\n    EXIT_FAILURE = 1;\n\noptions\n    .version( package_json.version )\n    .usage( '[options] files...' )\n    .option( '-d, --dir <path>', 'Directory to run Scriptor in' )\n    .option( '-a, --async', 'Run scripts asynchronously' )\n    .option( '-c, --concurrency <n>',\n             'Limit script concurrency to n when executed asynchronously (default: max_recursion + 1)' )\n    .option( '-q, --close', 'End the process when all scripts finish' )\n    .option( '-w, --watch', 'Watch scripts for changes and re-run them when changed' )\n    .option( '-p, --propagate', 'Propagate changes upwards when watching scripts' )\n    .option( '-l, --long_stack_traces', 'Display long stack trace for asynchronous errors' )\n    .option( '-r, --repeat <n>', 'Run script n times (in parallel if async)' )\n    .option( '-u, --unique', 'Only run unique scripts (will ignore duplicates in file arguments)' )\n    .option( '--debounce <n>',\n             'Wait n milliseconds for debounce on file watching events (default: ' +\n             ScriptorCommon.default_debounceMaxWait + 'ms)' )\n    .option( '--use_strict', 'Enforce strict mode' )\n    .option( '--max_listeners <n>', 'Set the maximum number of listeners on any particular script' )\n    .option( '--max_recursion <n>', 'Set the maximum recursion depth of scripts (default: ' +\n                                    ScriptorCommon.default_max_recursion + ')' )\n    .option( '-v, --verbose [n]', 'Print out extra status information (0 - normal, 1 - info, 2 - verbose)' )\n    .option( '--cork', 'Cork stdout before calling scripts' )\n    .option( '-s, --silent', 'Do not echo anything' )\n    .option( '--no_ext', 'Disable use of custom extensions with AMD injection' )\n    .option( '--no_signal', 'Do not intercept process signals' )\n    .option( '--no_glob', 'Do not match glob patterns' )\n    .option( '--no_title', 'Do not set process title' );\n\nexport default function( argv ) {\n    process.options = options.parse( argv );\n\n    if( options.use_strict ) {\n        Module.wrapper[0] += '\"use strict\";';\n        Object.freeze( Module.wrap );\n    }\n\n    if( !options.no_title ) {\n        process.title = 'Scriptor';\n    }\n\n    //The default log_level is LOG_NORMAL\n    let log_level = ScriptorCLI.LogLevel.LOG_NORMAL;\n\n    //If silent mode is enabled, it overrides verbose mode\n    if( options.silent ) {\n        log_level = ScriptorCLI.LogLevel.LOG_SILENT;\n\n    } else if( options.verbose ) {\n        //If using the -v shorthand, it is essentially --verbose 2\n        if( typeof options.verbose === 'boolean' ) {\n            log_level = ScriptorCLI.LogLevel.LOG_VERBOSE;\n\n        } else {\n            log_level = parseInt( options.verbose );\n\n            //Instead of throwing an error, just use the normal level\n            if( isNaN( log_level ) ) {\n                log_level = ScriptorCLI.LogLevel.LOG_NORMAL;\n            }\n        }\n    }\n\n    //Create the logger\n    let logger = new ScriptorCLI.Logger( log_level );\n\n    //Unhandled errors are printed and the process is killed\n    let onError = error => {\n        logger.error( error.stack || error );\n        process.exit( EXIT_FAILURE );\n    };\n\n    process.on( 'uncaughtException', onError );\n    process.on( 'unhandledRejection', onError );\n\n    let scripts;\n\n    if( !options.no_glob ) {\n        scripts = [];\n\n        for( let arg of args ) {\n            if( glob.hasMagic( arg ) ) {\n                scripts = scripts.concat( glob.sync( arg ) );\n\n            } else {\n                scripts.push( arg );\n            }\n        }\n\n    } else {\n        scripts = options.args;\n    }\n\n    if( options.unique ) {\n        logger.info( 'Only executing unique scripts' );\n\n        let uniqueScripts = [];\n\n        scripts.forEach( script => {\n            if( uniqueScripts.indexOf( script ) === -1 ) {\n                uniqueScripts.push( script );\n            }\n        } );\n\n        scripts = uniqueScripts;\n    }\n\n    if( options.repeat ) {\n        let count = parseInt( options.repeat );\n\n        if( !isNaN( count ) && count > 1 ) {\n            logger.info( 'Repeating script execution %d times', count );\n\n            let newScripts = [];\n\n            for( let i = 0; i < count; i++ ) {\n                newScripts = newScripts.concat( scripts );\n            }\n\n            scripts = newScripts;\n        }\n    }\n\n    /*\n     * options.dir only says the directory scriptor will be run in,\n     * not the directory where it looks for files. So it will resolve files relative to the\n     * invocation location, but change process.cwd to the new location.\n     * Since the script files will be absolute now, now issues should arrive when using the manager.\n     * */\n    if( typeof options.dir === 'string' ) {\n        scripts = scripts.map( script => {\n            return path.resolve( process.cwd(), script );\n        } );\n\n        process.chdir( options.dir );\n    }\n\n    //Only run anything if there are any scripts to run, otherwise show the help\n    if( scripts.length > 0 ) {\n        let Scriptor = require( './../' + (options.async ? 'async.js' : 'sync.js') );\n\n        if( !options.no_ext ) {\n            logger.info( 'Custom extensions installed.' );\n            Scriptor.installCustomExtensions();\n        }\n\n        if( options.async && options.long_stack_traces ) {\n            Scriptor.Promise.longStackTraces();\n            logger.info( 'Long Stack Traces enabled' );\n        }\n\n        //New manager created, using process.cwd as the cwd\n        let manager = new Scriptor.Manager();\n\n        if( options.propagate ) {\n            manager.propagateEvents();\n        }\n\n        let maxRecursion, concurrency, watch, debounce;\n\n        if( typeof options.debounce === 'string' ) {\n            debounce = manager.debounceMaxWait = toMilliseconds( options.debounce );\n        }\n\n        if( typeof options.max_listeners === 'string' ) {\n            let maxListeners = parseInt( options.max_listeners );\n\n            if( isFinite( maxListeners ) ) {\n                manager.setMaxListeners( maxListeners );\n\n            } else {\n                logger.error( 'Not a finite Number value for option --max_listeners' );\n                process.exit( EXIT_FAILURE );\n            }\n        }\n\n        //Basically, if both max_recursion and concurrency are set, they have to play along\n        //Otherwise, each will increase or whatever to not crash the application\n        if( options.max_recursion ) {\n            maxRecursion = parseIntOrInfinity( options.max_recursion );\n\n            if( isNaN( maxRecursion ) ) {\n                logger.error( 'Not a Number value for option --max_recursion' );\n                process.exit( EXIT_FAILURE );\n\n            } else if( options.concurrency ) {\n                concurrency = parseIntOrInfinity( options.concurrency );\n\n                if( isNaN( concurrency ) ) {\n                    logger.error( 'Not a Number value for option -c, --concurrency' );\n                    process.exit( EXIT_FAILURE );\n\n                } else if( concurrency > maxRecursion ) {\n                    logger.error( 'Concurrency set higher than max_recursion.\\n\\tScriptor will report false positives for exceeded recursion limits.' );\n                    process.exit( EXIT_FAILURE );\n                }\n\n            } else {\n                concurrency = maxRecursion + 1;\n            }\n\n        } else {\n            if( options.concurrency ) {\n                concurrency = parseIntOrInfinity( options.concurrency );\n\n                if( isNaN( concurrency ) ) {\n                    logger.error( 'Not a Number value for option -c, --concurrency' );\n                    process.exit( EXIT_FAILURE );\n\n                } else {\n                    maxRecursion = concurrency - 1;\n\n                    if( maxRecursion > ScriptorCommon.default_max_recursion ) {\n                        logger.warn( 'Increasing max_recursion to %d to handle increased concurrency', maxRecursion );\n                    }\n                }\n\n            } else {\n                maxRecursion = Scriptor.default_max_recursion;\n\n                concurrency = maxRecursion + 1;\n            }\n        }\n\n        //Close overrides watch, so if it is set to close, don't even both watching the scripts\n        if( options.watch && !options.close ) {\n            watch = true;\n        }\n\n        let run_script,\n            script_start = process.hrtime(),\n            place = 0,\n            instances = [];\n\n        if( !options.no_signal ) {\n            let closed = false;\n\n            let onClose = signal => {\n                if( !closed ) {\n\n                    for( let instance of instances ) {\n                        instance.unload();\n                    }\n\n                    //Close on the next tick so close events can propagate.\n                    //Exit code for Ctrl-C signals is 128 + sig according to\n                    // http://www.tldp.org/LDP/abs/html/exitcodes.html\n                    process.nextTick( process.exit.bind( null, 128 + signal ) );\n\n                    closed = true;\n                }\n            };\n\n            process.on( 'SIGINT', onClose.bind( null, constants.SIGINT ) );\n            process.on( 'SIGTERM', onClose.bind( null, constants.SIGTERM ) );\n        }\n\n        if( options.async ) {\n            logger.info( 'Asynchronous execution selected' );\n\n            run_script = ( instance, script, num ) => {\n                let start = process.hrtime();\n\n                instance.maxRecursion = maxRecursion;\n\n                if( log_level === ScriptorCLI.LogLevel.LOG_SILENT || options.cork ) {\n                    process.stdout.cork();\n                }\n\n                return instance.call().then( () => {\n                    logger.verbose( 'Finished script #%d, %s in %s.', num, script, diff_ms( start ) );\n                } );\n            };\n\n            let mapper = script => {\n                let num = place++;\n\n                logger.verbose( 'Running script #%d, %s.', num, script );\n\n                let instance = manager.add( script, false );\n\n                instances.push( instance );\n\n                if( watch ) {\n                    instance.watch( true );\n\n                    let onChange = () => {\n                        logger.verbose( 'Re-running script #%d, %s', num, script );\n                        run_script( instance, script, num );\n                    };\n\n                    if( typeof debounce === 'number' ) {\n                        onChange = _.debounce( onChange, debounce );\n                    }\n\n                    instance.on( 'change', onChange );\n                }\n\n                return run_script( instance, script, num );\n            };\n\n            logger.info( 'Concurrency set at %s', concurrency );\n\n            Scriptor.Promise.map( scripts, mapper, {concurrency: concurrency} ).catch( onError ).then( () => {\n                logger.log( 'All scripts successfully executed in %s', diff_ms( script_start ) );\n\n                if( options.close ) {\n                    process.exit( EXIT_SUCCESS );\n                }\n            } );\n\n        } else {\n            logger.info( 'Synchronous execution selected.' );\n\n            run_script = ( instance, script, num ) => {\n                let start = process.hrtime();\n\n                instance.maxRecursion = maxRecursion;\n\n                if( log_level === ScriptorCLI.LogLevel.LOG_SILENT || options.cork ) {\n                    process.stdout.cork();\n                }\n\n                instance.call();\n\n                logger.verbose( 'Finished script #%d, %s in %s.', num, script, diff_ms( start ) );\n            };\n\n            scripts.forEach( script => {\n                let num = place++;\n\n                logger.verbose( 'Running script #%d, %s.', num, script );\n\n                try {\n                    let instance = manager.add( script, false );\n\n                    instances.push( instance );\n\n                    if( watch ) {\n                        instance.watch( true );\n\n                        let onChange = () => {\n                            logger.verbose( 'Re-running script #%d, %s', num, script );\n                            run_script( instance, script, num );\n                        };\n\n                        if( typeof debounce === 'number' ) {\n                            onChange = _.debounce( onChange, debounce );\n                        }\n\n                        instance.on( 'change', onChange );\n                    }\n\n                    run_script( instance, script, num );\n\n                } catch( error ) {\n                    onError( error );\n                }\n            } );\n\n            logger.log( 'All scripts successfully executed in %s', diff_ms( script_start ) );\n\n            if( options.close ) {\n                process.exit( EXIT_SUCCESS );\n            }\n        }\n\n    } else {\n        options.help();\n    }\n}"
]
}